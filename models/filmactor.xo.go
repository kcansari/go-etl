package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// FilmActor represents a row from 'public.film_actor'.
type FilmActor struct {
	ActorID    int16     `json:"actor_id"`    // actor_id
	FilmID     int16     `json:"film_id"`     // film_id
	LastUpdate time.Time `json:"last_update"` // last_update
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [FilmActor] exists in the database.
func (fa *FilmActor) Exists() bool {
	return fa._exists
}

// Deleted returns true when the [FilmActor] has been marked for deletion
// from the database.
func (fa *FilmActor) Deleted() bool {
	return fa._deleted
}

// Insert inserts the [FilmActor] to the database.
func (fa *FilmActor) Insert(ctx context.Context, db DB) error {
	switch {
	case fa._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case fa._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.film_actor (` +
		`actor_id, film_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`
	// run
	logf(sqlstr, fa.ActorID, fa.FilmID, fa.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, fa.ActorID, fa.FilmID, fa.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	fa._exists = true
	return nil
}

// Update updates a [FilmActor] in the database.
func (fa *FilmActor) Update(ctx context.Context, db DB) error {
	switch {
	case !fa._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case fa._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.film_actor SET ` +
		`last_update = $1 ` +
		`WHERE actor_id = $2 AND film_id = $3`
	// run
	logf(sqlstr, fa.LastUpdate, fa.ActorID, fa.FilmID)
	if _, err := db.ExecContext(ctx, sqlstr, fa.LastUpdate, fa.ActorID, fa.FilmID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [FilmActor] to the database.
func (fa *FilmActor) Save(ctx context.Context, db DB) error {
	if fa.Exists() {
		return fa.Update(ctx, db)
	}
	return fa.Insert(ctx, db)
}

// Upsert performs an upsert for [FilmActor].
func (fa *FilmActor) Upsert(ctx context.Context, db DB) error {
	switch {
	case fa._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.film_actor (` +
		`actor_id, film_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)` +
		` ON CONFLICT (actor_id, film_id) DO ` +
		`UPDATE SET ` +
		`last_update = EXCLUDED.last_update `
	// run
	logf(sqlstr, fa.ActorID, fa.FilmID, fa.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, fa.ActorID, fa.FilmID, fa.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	fa._exists = true
	return nil
}

// Delete deletes the [FilmActor] from the database.
func (fa *FilmActor) Delete(ctx context.Context, db DB) error {
	switch {
	case !fa._exists: // doesn't exist
		return nil
	case fa._deleted: // deleted
		return nil
	}
	// delete with composite primary key
	const sqlstr = `DELETE FROM public.film_actor ` +
		`WHERE actor_id = $1 AND film_id = $2`
	// run
	logf(sqlstr, fa.ActorID, fa.FilmID)
	if _, err := db.ExecContext(ctx, sqlstr, fa.ActorID, fa.FilmID); err != nil {
		return logerror(err)
	}
	// set deleted
	fa._deleted = true
	return nil
}

// FilmActorByActorIDFilmID retrieves a row from 'public.film_actor' as a [FilmActor].
//
// Generated from index 'film_actor_pkey'.
func FilmActorByActorIDFilmID(ctx context.Context, db DB, actorID, filmID int16) (*FilmActor, error) {
	// query
	const sqlstr = `SELECT ` +
		`actor_id, film_id, last_update ` +
		`FROM public.film_actor ` +
		`WHERE actor_id = $1 AND film_id = $2`
	// run
	logf(sqlstr, actorID, filmID)
	fa := FilmActor{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, actorID, filmID).Scan(&fa.ActorID, &fa.FilmID, &fa.LastUpdate); err != nil {
		return nil, logerror(err)
	}
	return &fa, nil
}

// FilmActorByFilmID retrieves a row from 'public.film_actor' as a [FilmActor].
//
// Generated from index 'idx_fk_film_id'.
func FilmActorByFilmID(ctx context.Context, db DB, filmID int16) ([]*FilmActor, error) {
	// query
	const sqlstr = `SELECT ` +
		`actor_id, film_id, last_update ` +
		`FROM public.film_actor ` +
		`WHERE film_id = $1`
	// run
	logf(sqlstr, filmID)
	rows, err := db.QueryContext(ctx, sqlstr, filmID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*FilmActor
	for rows.Next() {
		fa := FilmActor{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&fa.ActorID, &fa.FilmID, &fa.LastUpdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &fa)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Actor returns the Actor associated with the [FilmActor]'s (ActorID).
//
// Generated from foreign key 'film_actor_actor_id_fkey'.
func (fa *FilmActor) Actor(ctx context.Context, db DB) (*Actor, error) {
	return ActorByActorID(ctx, db, int(fa.ActorID))
}

// Film returns the Film associated with the [FilmActor]'s (FilmID).
//
// Generated from foreign key 'film_actor_film_id_fkey'.
func (fa *FilmActor) Film(ctx context.Context, db DB) (*Film, error) {
	return FilmByFilmID(ctx, db, int(fa.FilmID))
}
