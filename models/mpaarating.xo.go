package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"fmt"
)

// MpaaRating is the 'mpaa_rating' enum type from schema 'public'.
type MpaaRating uint16

// MpaaRating values.
const (
	// MpaaRatingG is the 'G' mpaa_rating.
	MpaaRatingG MpaaRating = 1
	// MpaaRatingPg is the 'PG' mpaa_rating.
	MpaaRatingPg MpaaRating = 2
	// MpaaRatingPg13 is the 'PG-13' mpaa_rating.
	MpaaRatingPg13 MpaaRating = 3
	// MpaaRatingR is the 'R' mpaa_rating.
	MpaaRatingR MpaaRating = 4
	// MpaaRatingNc17 is the 'NC-17' mpaa_rating.
	MpaaRatingNc17 MpaaRating = 5
)

// String satisfies the [fmt.Stringer] interface.
func (mr MpaaRating) String() string {
	switch mr {
	case MpaaRatingG:
		return "G"
	case MpaaRatingPg:
		return "PG"
	case MpaaRatingPg13:
		return "PG-13"
	case MpaaRatingR:
		return "R"
	case MpaaRatingNc17:
		return "NC-17"
	}
	return fmt.Sprintf("MpaaRating(%d)", mr)
}

// MarshalText marshals [MpaaRating] into text.
func (mr MpaaRating) MarshalText() ([]byte, error) {
	return []byte(mr.String()), nil
}

// UnmarshalText unmarshals [MpaaRating] from text.
func (mr *MpaaRating) UnmarshalText(buf []byte) error {
	switch str := string(buf); str {
	case "G":
		*mr = MpaaRatingG
	case "PG":
		*mr = MpaaRatingPg
	case "PG-13":
		*mr = MpaaRatingPg13
	case "R":
		*mr = MpaaRatingR
	case "NC-17":
		*mr = MpaaRatingNc17
	default:
		return ErrInvalidMpaaRating(str)
	}
	return nil
}

// Value satisfies the [driver.Valuer] interface.
func (mr MpaaRating) Value() (driver.Value, error) {
	return mr.String(), nil
}

// Scan satisfies the [sql.Scanner] interface.
func (mr *MpaaRating) Scan(v interface{}) error {
	switch x := v.(type) {
	case []byte:
		return mr.UnmarshalText(x)
	case string:
		return mr.UnmarshalText([]byte(x))
	}
	return ErrInvalidMpaaRating(fmt.Sprintf("%T", v))
}

// NullMpaaRating represents a null 'mpaa_rating' enum for schema 'public'.
type NullMpaaRating struct {
	MpaaRating MpaaRating
	// Valid is true if [MpaaRating] is not null.
	Valid bool
}

// Value satisfies the [driver.Valuer] interface.
func (nmr NullMpaaRating) Value() (driver.Value, error) {
	if !nmr.Valid {
		return nil, nil
	}
	return nmr.MpaaRating.Value()
}

// Scan satisfies the [sql.Scanner] interface.
func (nmr *NullMpaaRating) Scan(v interface{}) error {
	if v == nil {
		nmr.MpaaRating, nmr.Valid = 0, false
		return nil
	}
	err := nmr.MpaaRating.Scan(v)
	nmr.Valid = err == nil
	return err
}

// ErrInvalidMpaaRating is the invalid [MpaaRating] error.
type ErrInvalidMpaaRating string

// Error satisfies the error interface.
func (err ErrInvalidMpaaRating) Error() string {
	return fmt.Sprintf("invalid MpaaRating(%s)", string(err))
}
