package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Staff represents a row from 'public.staff'.
type Staff struct {
	StaffID    int            `json:"staff_id"`    // staff_id
	FirstName  string         `json:"first_name"`  // first_name
	LastName   string         `json:"last_name"`   // last_name
	AddressID  int16          `json:"address_id"`  // address_id
	Email      sql.NullString `json:"email"`       // email
	StoreID    int16          `json:"store_id"`    // store_id
	Active     bool           `json:"active"`      // active
	Username   string         `json:"username"`    // username
	Password   sql.NullString `json:"password"`    // password
	LastUpdate time.Time      `json:"last_update"` // last_update
	Picture    []byte         `json:"picture"`     // picture
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Staff] exists in the database.
func (s *Staff) Exists() bool {
	return s._exists
}

// Deleted returns true when the [Staff] has been marked for deletion
// from the database.
func (s *Staff) Deleted() bool {
	return s._deleted
}

// Insert inserts the [Staff] to the database.
func (s *Staff) Insert(ctx context.Context, db DB) error {
	switch {
	case s._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case s._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.staff (` +
		`staff_id, first_name, last_name, address_id, email, store_id, active, username, password, last_update, picture` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`)`
	// run
	logf(sqlstr, s.StaffID, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture)
	if _, err := db.ExecContext(ctx, sqlstr, s.StaffID, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Update updates a [Staff] in the database.
func (s *Staff) Update(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case s._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.staff SET ` +
		`first_name = $1, last_name = $2, address_id = $3, email = $4, store_id = $5, active = $6, username = $7, password = $8, last_update = $9, picture = $10 ` +
		`WHERE staff_id = $11`
	// run
	logf(sqlstr, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture, s.StaffID)
	if _, err := db.ExecContext(ctx, sqlstr, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture, s.StaffID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Staff] to the database.
func (s *Staff) Save(ctx context.Context, db DB) error {
	if s.Exists() {
		return s.Update(ctx, db)
	}
	return s.Insert(ctx, db)
}

// Upsert performs an upsert for [Staff].
func (s *Staff) Upsert(ctx context.Context, db DB) error {
	switch {
	case s._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.staff (` +
		`staff_id, first_name, last_name, address_id, email, store_id, active, username, password, last_update, picture` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`)` +
		` ON CONFLICT (staff_id) DO ` +
		`UPDATE SET ` +
		`first_name = EXCLUDED.first_name, last_name = EXCLUDED.last_name, address_id = EXCLUDED.address_id, email = EXCLUDED.email, store_id = EXCLUDED.store_id, active = EXCLUDED.active, username = EXCLUDED.username, password = EXCLUDED.password, last_update = EXCLUDED.last_update, picture = EXCLUDED.picture `
	// run
	logf(sqlstr, s.StaffID, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture)
	if _, err := db.ExecContext(ctx, sqlstr, s.StaffID, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture); err != nil {
		return logerror(err)
	}
	// set exists
	s._exists = true
	return nil
}

// Delete deletes the [Staff] from the database.
func (s *Staff) Delete(ctx context.Context, db DB) error {
	switch {
	case !s._exists: // doesn't exist
		return nil
	case s._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.staff ` +
		`WHERE staff_id = $1`
	// run
	logf(sqlstr, s.StaffID)
	if _, err := db.ExecContext(ctx, sqlstr, s.StaffID); err != nil {
		return logerror(err)
	}
	// set deleted
	s._deleted = true
	return nil
}

// StaffByStaffID retrieves a row from 'public.staff' as a [Staff].
//
// Generated from index 'staff_pkey'.
func StaffByStaffID(ctx context.Context, db DB, staffID int) (*Staff, error) {
	// query
	const sqlstr = `SELECT ` +
		`staff_id, first_name, last_name, address_id, email, store_id, active, username, password, last_update, picture ` +
		`FROM public.staff ` +
		`WHERE staff_id = $1`
	// run
	logf(sqlstr, staffID)
	s := Staff{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, staffID).Scan(&s.StaffID, &s.FirstName, &s.LastName, &s.AddressID, &s.Email, &s.StoreID, &s.Active, &s.Username, &s.Password, &s.LastUpdate, &s.Picture); err != nil {
		return nil, logerror(err)
	}
	return &s, nil
}

// Address returns the Address associated with the [Staff]'s (AddressID).
//
// Generated from foreign key 'staff_address_id_fkey'.
func (s *Staff) Address(ctx context.Context, db DB) (*Address, error) {
	return AddressByAddressID(ctx, db, int(s.AddressID))
}
