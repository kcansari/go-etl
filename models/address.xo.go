package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"
)

// Address represents a row from 'public.address'.
type Address struct {
	AddressID  int            `json:"address_id"`  // address_id
	Address    string         `json:"address"`     // address
	Address2   sql.NullString `json:"address2"`    // address2
	District   string         `json:"district"`    // district
	CityID     int16          `json:"city_id"`     // city_id
	PostalCode sql.NullString `json:"postal_code"` // postal_code
	Phone      string         `json:"phone"`       // phone
	LastUpdate time.Time      `json:"last_update"` // last_update
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Address] exists in the database.
func (a *Address) Exists() bool {
	return a._exists
}

// Deleted returns true when the [Address] has been marked for deletion
// from the database.
func (a *Address) Deleted() bool {
	return a._deleted
}

// Insert inserts the [Address] to the database.
func (a *Address) Insert(ctx context.Context, db DB) error {
	switch {
	case a._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case a._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.address (` +
		`address_id, address, address2, district, city_id, postal_code, phone, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`
	// run
	logf(sqlstr, a.AddressID, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, a.AddressID, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Update updates a [Address] in the database.
func (a *Address) Update(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case a._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.address SET ` +
		`address = $1, address2 = $2, district = $3, city_id = $4, postal_code = $5, phone = $6, last_update = $7 ` +
		`WHERE address_id = $8`
	// run
	logf(sqlstr, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate, a.AddressID)
	if _, err := db.ExecContext(ctx, sqlstr, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate, a.AddressID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Address] to the database.
func (a *Address) Save(ctx context.Context, db DB) error {
	if a.Exists() {
		return a.Update(ctx, db)
	}
	return a.Insert(ctx, db)
}

// Upsert performs an upsert for [Address].
func (a *Address) Upsert(ctx context.Context, db DB) error {
	switch {
	case a._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.address (` +
		`address_id, address, address2, district, city_id, postal_code, phone, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)` +
		` ON CONFLICT (address_id) DO ` +
		`UPDATE SET ` +
		`address = EXCLUDED.address, address2 = EXCLUDED.address2, district = EXCLUDED.district, city_id = EXCLUDED.city_id, postal_code = EXCLUDED.postal_code, phone = EXCLUDED.phone, last_update = EXCLUDED.last_update `
	// run
	logf(sqlstr, a.AddressID, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, a.AddressID, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	a._exists = true
	return nil
}

// Delete deletes the [Address] from the database.
func (a *Address) Delete(ctx context.Context, db DB) error {
	switch {
	case !a._exists: // doesn't exist
		return nil
	case a._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.address ` +
		`WHERE address_id = $1`
	// run
	logf(sqlstr, a.AddressID)
	if _, err := db.ExecContext(ctx, sqlstr, a.AddressID); err != nil {
		return logerror(err)
	}
	// set deleted
	a._deleted = true
	return nil
}

// AddressByAddressID retrieves a row from 'public.address' as a [Address].
//
// Generated from index 'address_pkey'.
func AddressByAddressID(ctx context.Context, db DB, addressID int) (*Address, error) {
	// query
	const sqlstr = `SELECT ` +
		`address_id, address, address2, district, city_id, postal_code, phone, last_update ` +
		`FROM public.address ` +
		`WHERE address_id = $1`
	// run
	logf(sqlstr, addressID)
	a := Address{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, addressID).Scan(&a.AddressID, &a.Address, &a.Address2, &a.District, &a.CityID, &a.PostalCode, &a.Phone, &a.LastUpdate); err != nil {
		return nil, logerror(err)
	}
	return &a, nil
}

// AddressByCityID retrieves a row from 'public.address' as a [Address].
//
// Generated from index 'idx_fk_city_id'.
func AddressByCityID(ctx context.Context, db DB, cityID int16) ([]*Address, error) {
	// query
	const sqlstr = `SELECT ` +
		`address_id, address, address2, district, city_id, postal_code, phone, last_update ` +
		`FROM public.address ` +
		`WHERE city_id = $1`
	// run
	logf(sqlstr, cityID)
	rows, err := db.QueryContext(ctx, sqlstr, cityID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Address
	for rows.Next() {
		a := Address{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&a.AddressID, &a.Address, &a.Address2, &a.District, &a.CityID, &a.PostalCode, &a.Phone, &a.LastUpdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &a)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// City returns the City associated with the [Address]'s (CityID).
//
// Generated from foreign key 'fk_address_city'.
func (a *Address) City(ctx context.Context, db DB) (*City, error) {
	return CityByCityID(ctx, db, int(a.CityID))
}
