package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// Payment represents a row from 'public.payment'.
type Payment struct {
	PaymentID   int       `json:"payment_id"`   // payment_id
	CustomerID  int16     `json:"customer_id"`  // customer_id
	StaffID     int16     `json:"staff_id"`     // staff_id
	RentalID    int       `json:"rental_id"`    // rental_id
	Amount      float64   `json:"amount"`       // amount
	PaymentDate time.Time `json:"payment_date"` // payment_date
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Payment] exists in the database.
func (p *Payment) Exists() bool {
	return p._exists
}

// Deleted returns true when the [Payment] has been marked for deletion
// from the database.
func (p *Payment) Deleted() bool {
	return p._deleted
}

// Insert inserts the [Payment] to the database.
func (p *Payment) Insert(ctx context.Context, db DB) error {
	switch {
	case p._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case p._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.payment (` +
		`payment_id, customer_id, staff_id, rental_id, amount, payment_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)`
	// run
	logf(sqlstr, p.PaymentID, p.CustomerID, p.StaffID, p.RentalID, p.Amount, p.PaymentDate)
	if _, err := db.ExecContext(ctx, sqlstr, p.PaymentID, p.CustomerID, p.StaffID, p.RentalID, p.Amount, p.PaymentDate); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Update updates a [Payment] in the database.
func (p *Payment) Update(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case p._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.payment SET ` +
		`customer_id = $1, staff_id = $2, rental_id = $3, amount = $4, payment_date = $5 ` +
		`WHERE payment_id = $6`
	// run
	logf(sqlstr, p.CustomerID, p.StaffID, p.RentalID, p.Amount, p.PaymentDate, p.PaymentID)
	if _, err := db.ExecContext(ctx, sqlstr, p.CustomerID, p.StaffID, p.RentalID, p.Amount, p.PaymentDate, p.PaymentID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Payment] to the database.
func (p *Payment) Save(ctx context.Context, db DB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}
	return p.Insert(ctx, db)
}

// Upsert performs an upsert for [Payment].
func (p *Payment) Upsert(ctx context.Context, db DB) error {
	switch {
	case p._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.payment (` +
		`payment_id, customer_id, staff_id, rental_id, amount, payment_date` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6` +
		`)` +
		` ON CONFLICT (payment_id) DO ` +
		`UPDATE SET ` +
		`customer_id = EXCLUDED.customer_id, staff_id = EXCLUDED.staff_id, rental_id = EXCLUDED.rental_id, amount = EXCLUDED.amount, payment_date = EXCLUDED.payment_date `
	// run
	logf(sqlstr, p.PaymentID, p.CustomerID, p.StaffID, p.RentalID, p.Amount, p.PaymentDate)
	if _, err := db.ExecContext(ctx, sqlstr, p.PaymentID, p.CustomerID, p.StaffID, p.RentalID, p.Amount, p.PaymentDate); err != nil {
		return logerror(err)
	}
	// set exists
	p._exists = true
	return nil
}

// Delete deletes the [Payment] from the database.
func (p *Payment) Delete(ctx context.Context, db DB) error {
	switch {
	case !p._exists: // doesn't exist
		return nil
	case p._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.payment ` +
		`WHERE payment_id = $1`
	// run
	logf(sqlstr, p.PaymentID)
	if _, err := db.ExecContext(ctx, sqlstr, p.PaymentID); err != nil {
		return logerror(err)
	}
	// set deleted
	p._deleted = true
	return nil
}

// PaymentByCustomerID retrieves a row from 'public.payment' as a [Payment].
//
// Generated from index 'idx_fk_customer_id'.
func PaymentByCustomerID(ctx context.Context, db DB, customerID int16) ([]*Payment, error) {
	// query
	const sqlstr = `SELECT ` +
		`payment_id, customer_id, staff_id, rental_id, amount, payment_date ` +
		`FROM public.payment ` +
		`WHERE customer_id = $1`
	// run
	logf(sqlstr, customerID)
	rows, err := db.QueryContext(ctx, sqlstr, customerID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Payment
	for rows.Next() {
		p := Payment{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.PaymentID, &p.CustomerID, &p.StaffID, &p.RentalID, &p.Amount, &p.PaymentDate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PaymentByRentalID retrieves a row from 'public.payment' as a [Payment].
//
// Generated from index 'idx_fk_rental_id'.
func PaymentByRentalID(ctx context.Context, db DB, rentalID int) ([]*Payment, error) {
	// query
	const sqlstr = `SELECT ` +
		`payment_id, customer_id, staff_id, rental_id, amount, payment_date ` +
		`FROM public.payment ` +
		`WHERE rental_id = $1`
	// run
	logf(sqlstr, rentalID)
	rows, err := db.QueryContext(ctx, sqlstr, rentalID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Payment
	for rows.Next() {
		p := Payment{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.PaymentID, &p.CustomerID, &p.StaffID, &p.RentalID, &p.Amount, &p.PaymentDate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PaymentByStaffID retrieves a row from 'public.payment' as a [Payment].
//
// Generated from index 'idx_fk_staff_id'.
func PaymentByStaffID(ctx context.Context, db DB, staffID int16) ([]*Payment, error) {
	// query
	const sqlstr = `SELECT ` +
		`payment_id, customer_id, staff_id, rental_id, amount, payment_date ` +
		`FROM public.payment ` +
		`WHERE staff_id = $1`
	// run
	logf(sqlstr, staffID)
	rows, err := db.QueryContext(ctx, sqlstr, staffID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Payment
	for rows.Next() {
		p := Payment{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&p.PaymentID, &p.CustomerID, &p.StaffID, &p.RentalID, &p.Amount, &p.PaymentDate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &p)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// PaymentByPaymentID retrieves a row from 'public.payment' as a [Payment].
//
// Generated from index 'payment_pkey'.
func PaymentByPaymentID(ctx context.Context, db DB, paymentID int) (*Payment, error) {
	// query
	const sqlstr = `SELECT ` +
		`payment_id, customer_id, staff_id, rental_id, amount, payment_date ` +
		`FROM public.payment ` +
		`WHERE payment_id = $1`
	// run
	logf(sqlstr, paymentID)
	p := Payment{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, paymentID).Scan(&p.PaymentID, &p.CustomerID, &p.StaffID, &p.RentalID, &p.Amount, &p.PaymentDate); err != nil {
		return nil, logerror(err)
	}
	return &p, nil
}

// Customer returns the Customer associated with the [Payment]'s (CustomerID).
//
// Generated from foreign key 'payment_customer_id_fkey'.
func (p *Payment) Customer(ctx context.Context, db DB) (*Customer, error) {
	return CustomerByCustomerID(ctx, db, int(p.CustomerID))
}

// Rental returns the Rental associated with the [Payment]'s (RentalID).
//
// Generated from foreign key 'payment_rental_id_fkey'.
func (p *Payment) Rental(ctx context.Context, db DB) (*Rental, error) {
	return RentalByRentalID(ctx, db, p.RentalID)
}

// Staff returns the Staff associated with the [Payment]'s (StaffID).
//
// Generated from foreign key 'payment_staff_id_fkey'.
func (p *Payment) Staff(ctx context.Context, db DB) (*Staff, error) {
	return StaffByStaffID(ctx, db, int(p.StaffID))
}
