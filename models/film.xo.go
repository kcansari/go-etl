package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"time"

	"github.com/lib/pq"
)

// Film represents a row from 'public.film'.
type Film struct {
	FilmID          int            `json:"film_id"`          // film_id
	Title           string         `json:"title"`            // title
	Description     sql.NullString `json:"description"`      // description
	ReleaseYear     NullYear       `json:"release_year"`     // release_year
	LanguageID      int16          `json:"language_id"`      // language_id
	RentalDuration  int16          `json:"rental_duration"`  // rental_duration
	RentalRate      float64        `json:"rental_rate"`      // rental_rate
	Length          sql.NullInt64  `json:"length"`           // length
	ReplacementCost float64        `json:"replacement_cost"` // replacement_cost
	Rating          NullMpaaRating `json:"rating"`           // rating
	LastUpdate      time.Time      `json:"last_update"`      // last_update
	SpecialFeatures pq.StringArray `json:"special_features"` // special_features
	Fulltext        Tsvector       `json:"fulltext"`         // fulltext
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [Film] exists in the database.
func (f *Film) Exists() bool {
	return f._exists
}

// Deleted returns true when the [Film] has been marked for deletion
// from the database.
func (f *Film) Deleted() bool {
	return f._deleted
}

// Insert inserts the [Film] to the database.
func (f *Film) Insert(ctx context.Context, db DB) error {
	switch {
	case f._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case f._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.film (` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`
	// run
	logf(sqlstr, f.FilmID, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext)
	if _, err := db.ExecContext(ctx, sqlstr, f.FilmID, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Update updates a [Film] in the database.
func (f *Film) Update(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case f._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.film SET ` +
		`title = $1, description = $2, release_year = $3, language_id = $4, rental_duration = $5, rental_rate = $6, length = $7, replacement_cost = $8, rating = $9, last_update = $10, special_features = $11, fulltext = $12 ` +
		`WHERE film_id = $13`
	// run
	logf(sqlstr, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext, f.FilmID)
	if _, err := db.ExecContext(ctx, sqlstr, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext, f.FilmID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [Film] to the database.
func (f *Film) Save(ctx context.Context, db DB) error {
	if f.Exists() {
		return f.Update(ctx, db)
	}
	return f.Insert(ctx, db)
}

// Upsert performs an upsert for [Film].
func (f *Film) Upsert(ctx context.Context, db DB) error {
	switch {
	case f._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.film (` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)` +
		` ON CONFLICT (film_id) DO ` +
		`UPDATE SET ` +
		`title = EXCLUDED.title, description = EXCLUDED.description, release_year = EXCLUDED.release_year, language_id = EXCLUDED.language_id, rental_duration = EXCLUDED.rental_duration, rental_rate = EXCLUDED.rental_rate, length = EXCLUDED.length, replacement_cost = EXCLUDED.replacement_cost, rating = EXCLUDED.rating, last_update = EXCLUDED.last_update, special_features = EXCLUDED.special_features, fulltext = EXCLUDED.fulltext `
	// run
	logf(sqlstr, f.FilmID, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext)
	if _, err := db.ExecContext(ctx, sqlstr, f.FilmID, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext); err != nil {
		return logerror(err)
	}
	// set exists
	f._exists = true
	return nil
}

// Delete deletes the [Film] from the database.
func (f *Film) Delete(ctx context.Context, db DB) error {
	switch {
	case !f._exists: // doesn't exist
		return nil
	case f._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.film ` +
		`WHERE film_id = $1`
	// run
	logf(sqlstr, f.FilmID)
	if _, err := db.ExecContext(ctx, sqlstr, f.FilmID); err != nil {
		return logerror(err)
	}
	// set deleted
	f._deleted = true
	return nil
}

// FilmByFulltext retrieves a row from 'public.film' as a [Film].
//
// Generated from index 'film_fulltext_idx'.
func FilmByFulltext(ctx context.Context, db DB, fulltext Tsvector) ([]*Film, error) {
	// query
	const sqlstr = `SELECT ` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext ` +
		`FROM public.film ` +
		`WHERE fulltext = $1`
	// run
	logf(sqlstr, fulltext)
	rows, err := db.QueryContext(ctx, sqlstr, fulltext)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Film
	for rows.Next() {
		f := Film{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&f.FilmID, &f.Title, &f.Description, &f.ReleaseYear, &f.LanguageID, &f.RentalDuration, &f.RentalRate, &f.Length, &f.ReplacementCost, &f.Rating, &f.LastUpdate, &f.SpecialFeatures, &f.Fulltext); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &f)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// FilmByFilmID retrieves a row from 'public.film' as a [Film].
//
// Generated from index 'film_pkey'.
func FilmByFilmID(ctx context.Context, db DB, filmID int) (*Film, error) {
	// query
	const sqlstr = `SELECT ` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext ` +
		`FROM public.film ` +
		`WHERE film_id = $1`
	// run
	logf(sqlstr, filmID)
	f := Film{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, filmID).Scan(&f.FilmID, &f.Title, &f.Description, &f.ReleaseYear, &f.LanguageID, &f.RentalDuration, &f.RentalRate, &f.Length, &f.ReplacementCost, &f.Rating, &f.LastUpdate, &f.SpecialFeatures, &f.Fulltext); err != nil {
		return nil, logerror(err)
	}
	return &f, nil
}

// FilmByLanguageID retrieves a row from 'public.film' as a [Film].
//
// Generated from index 'idx_fk_language_id'.
func FilmByLanguageID(ctx context.Context, db DB, languageID int16) ([]*Film, error) {
	// query
	const sqlstr = `SELECT ` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext ` +
		`FROM public.film ` +
		`WHERE language_id = $1`
	// run
	logf(sqlstr, languageID)
	rows, err := db.QueryContext(ctx, sqlstr, languageID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Film
	for rows.Next() {
		f := Film{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&f.FilmID, &f.Title, &f.Description, &f.ReleaseYear, &f.LanguageID, &f.RentalDuration, &f.RentalRate, &f.Length, &f.ReplacementCost, &f.Rating, &f.LastUpdate, &f.SpecialFeatures, &f.Fulltext); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &f)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// FilmByTitle retrieves a row from 'public.film' as a [Film].
//
// Generated from index 'idx_title'.
func FilmByTitle(ctx context.Context, db DB, title string) ([]*Film, error) {
	// query
	const sqlstr = `SELECT ` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext ` +
		`FROM public.film ` +
		`WHERE title = $1`
	// run
	logf(sqlstr, title)
	rows, err := db.QueryContext(ctx, sqlstr, title)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*Film
	for rows.Next() {
		f := Film{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&f.FilmID, &f.Title, &f.Description, &f.ReleaseYear, &f.LanguageID, &f.RentalDuration, &f.RentalRate, &f.Length, &f.ReplacementCost, &f.Rating, &f.LastUpdate, &f.SpecialFeatures, &f.Fulltext); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &f)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Language returns the Language associated with the [Film]'s (LanguageID).
//
// Generated from foreign key 'film_language_id_fkey'.
func (f *Film) Language(ctx context.Context, db DB) (*Language, error) {
	return LanguageByLanguageID(ctx, db, int(f.LanguageID))
}
