package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"time"
)

// City represents a row from 'public.city'.
type City struct {
	CityID     int       `json:"city_id"`     // city_id
	City       string    `json:"city"`        // city
	CountryID  int16     `json:"country_id"`  // country_id
	LastUpdate time.Time `json:"last_update"` // last_update
	// xo fields
	_exists, _deleted bool
}

// Exists returns true when the [City] exists in the database.
func (c *City) Exists() bool {
	return c._exists
}

// Deleted returns true when the [City] has been marked for deletion
// from the database.
func (c *City) Deleted() bool {
	return c._deleted
}

// Insert inserts the [City] to the database.
func (c *City) Insert(ctx context.Context, db DB) error {
	switch {
	case c._exists: // already exists
		return logerror(&ErrInsertFailed{ErrAlreadyExists})
	case c._deleted: // deleted
		return logerror(&ErrInsertFailed{ErrMarkedForDeletion})
	}
	// insert (manual)
	const sqlstr = `INSERT INTO public.city (` +
		`city_id, city, country_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`
	// run
	logf(sqlstr, c.CityID, c.City, c.CountryID, c.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, c.CityID, c.City, c.CountryID, c.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Update updates a [City] in the database.
func (c *City) Update(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return logerror(&ErrUpdateFailed{ErrDoesNotExist})
	case c._deleted: // deleted
		return logerror(&ErrUpdateFailed{ErrMarkedForDeletion})
	}
	// update with composite primary key
	const sqlstr = `UPDATE public.city SET ` +
		`city = $1, country_id = $2, last_update = $3 ` +
		`WHERE city_id = $4`
	// run
	logf(sqlstr, c.City, c.CountryID, c.LastUpdate, c.CityID)
	if _, err := db.ExecContext(ctx, sqlstr, c.City, c.CountryID, c.LastUpdate, c.CityID); err != nil {
		return logerror(err)
	}
	return nil
}

// Save saves the [City] to the database.
func (c *City) Save(ctx context.Context, db DB) error {
	if c.Exists() {
		return c.Update(ctx, db)
	}
	return c.Insert(ctx, db)
}

// Upsert performs an upsert for [City].
func (c *City) Upsert(ctx context.Context, db DB) error {
	switch {
	case c._deleted: // deleted
		return logerror(&ErrUpsertFailed{ErrMarkedForDeletion})
	}
	// upsert
	const sqlstr = `INSERT INTO public.city (` +
		`city_id, city, country_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)` +
		` ON CONFLICT (city_id) DO ` +
		`UPDATE SET ` +
		`city = EXCLUDED.city, country_id = EXCLUDED.country_id, last_update = EXCLUDED.last_update `
	// run
	logf(sqlstr, c.CityID, c.City, c.CountryID, c.LastUpdate)
	if _, err := db.ExecContext(ctx, sqlstr, c.CityID, c.City, c.CountryID, c.LastUpdate); err != nil {
		return logerror(err)
	}
	// set exists
	c._exists = true
	return nil
}

// Delete deletes the [City] from the database.
func (c *City) Delete(ctx context.Context, db DB) error {
	switch {
	case !c._exists: // doesn't exist
		return nil
	case c._deleted: // deleted
		return nil
	}
	// delete with single primary key
	const sqlstr = `DELETE FROM public.city ` +
		`WHERE city_id = $1`
	// run
	logf(sqlstr, c.CityID)
	if _, err := db.ExecContext(ctx, sqlstr, c.CityID); err != nil {
		return logerror(err)
	}
	// set deleted
	c._deleted = true
	return nil
}

// CityByCityID retrieves a row from 'public.city' as a [City].
//
// Generated from index 'city_pkey'.
func CityByCityID(ctx context.Context, db DB, cityID int) (*City, error) {
	// query
	const sqlstr = `SELECT ` +
		`city_id, city, country_id, last_update ` +
		`FROM public.city ` +
		`WHERE city_id = $1`
	// run
	logf(sqlstr, cityID)
	c := City{
		_exists: true,
	}
	if err := db.QueryRowContext(ctx, sqlstr, cityID).Scan(&c.CityID, &c.City, &c.CountryID, &c.LastUpdate); err != nil {
		return nil, logerror(err)
	}
	return &c, nil
}

// CityByCountryID retrieves a row from 'public.city' as a [City].
//
// Generated from index 'idx_fk_country_id'.
func CityByCountryID(ctx context.Context, db DB, countryID int16) ([]*City, error) {
	// query
	const sqlstr = `SELECT ` +
		`city_id, city, country_id, last_update ` +
		`FROM public.city ` +
		`WHERE country_id = $1`
	// run
	logf(sqlstr, countryID)
	rows, err := db.QueryContext(ctx, sqlstr, countryID)
	if err != nil {
		return nil, logerror(err)
	}
	defer rows.Close()
	// process
	var res []*City
	for rows.Next() {
		c := City{
			_exists: true,
		}
		// scan
		if err := rows.Scan(&c.CityID, &c.City, &c.CountryID, &c.LastUpdate); err != nil {
			return nil, logerror(err)
		}
		res = append(res, &c)
	}
	if err := rows.Err(); err != nil {
		return nil, logerror(err)
	}
	return res, nil
}

// Country returns the Country associated with the [City]'s (CountryID).
//
// Generated from foreign key 'fk_city'.
func (c *City) Country(ctx context.Context, db DB) (*Country, error) {
	return CountryByCountryID(ctx, db, int(c.CountryID))
}
